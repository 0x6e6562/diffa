<?xml version="1.0"?>
<!--

    Copyright (C) 2010-2011 LShift Ltd.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="net.lshift.diffa.kernel.differencing">
  <class name="PendingDifferenceEvent" table="pending_diffs">
    <id name="oid">
      <generator class="native" />
    </id>
    <component name="objId">
      <property name="id" type="string" column="entity_id" />
      <component name="pair">
        <property name="domain" type="string" column="domain" index="pdiff_domain_idx" />
        <property name="key" type="string" column="pair" />
      </component>
    </component>
    <property name="detectedAt" type="org.jadira.usertype.dateandtime.joda.PersistentDateTime" column="detected_at" not-null="true" />
    <property name="lastSeen" type="org.jadira.usertype.dateandtime.joda.PersistentDateTime" column="last_seen" not-null="true" />
    <property name="upstreamVsn" type="string" column="upstream_vsn" />
    <property name="downstreamVsn" type="string" column="downstream_vsn" />
  </class>

  <class name="ReportedDifferenceEvent" table="diffs">
    <id name="seqId" column="seq_id">
      <generator class="native" />
    </id>
    <component name="objId">
      <property name="id" type="string" column="entity_id" />
      <component name="pair">
        <property name="domain" type="string" column="domain" index="rdiff_domain_idx" />
        <property name="key" type="string" column="pair" />
      </component>
    </component>
    <property name="isMatch" type="boolean" column="is_match" index="rdiff_ismatched" />
    <property name="detectedAt" type="org.jadira.usertype.dateandtime.joda.PersistentDateTime" column="detected_at" not-null="true" />
    <property name="lastSeen" type="org.jadira.usertype.dateandtime.joda.PersistentDateTime" column="last_seen" not-null="true" />
    <property name="upstreamVsn" type="string" column="upstream_vsn" />
    <property name="downstreamVsn" type="string" column="downstream_vsn" />
  </class>

  <query name="pendingByDomainIdAndVersionID">
    select e from PendingDifferenceEvent e where e.objId.pair.domain = :domain and e.objId.pair.key = :pair and e.objId.id = :objId
  </query>
  <query name="eventByDomainAndVersionID">
    select e from ReportedDifferenceEvent e where e.objId.pair.domain = :domain and e.objId.pair.key = :pair and e.objId.id = :objId
  </query>

  <query name="eventByDomainAndSeqId">
    select e from ReportedDifferenceEvent e where e.objId.pair.domain = :domain and e.seqId = :seqId
  </query>
  <query name="eventsSinceByDomain">
    select e from ReportedDifferenceEvent e where e.objId.pair.domain = :domain and e.seqId > :seqId
  </query>
  <query name="maxSeqIdByDomain">
    select max(e.seqId) from ReportedDifferenceEvent e where e.objId.pair.domain = :domain
  </query>
  <query name="unmatchedEventsInIntervalByDomain">
    select e from ReportedDifferenceEvent e where e.objId.pair.domain = :domain and e.detectedAt >= :start and e.detectedAt &lt; :end and e.isMatch = false
  </query>
  <query name="unmatchedEventsInIntervalByDomainAndPair">
    select e from ReportedDifferenceEvent e where e.objId.pair.domain = :domain and e.objId.pair.key = :pair and e.detectedAt >= :start and e.detectedAt &lt; :end and e.isMatch = false
  </query>
  <query name="countEventsInIntervalByDomainAndPair">
    select count(e) from ReportedDifferenceEvent e where e.objId.pair.domain = :domain and e.objId.pair.key = :pair and e.detectedAt >= :start and e.detectedAt &lt; :end
  </query>
  <query name="unmatchedEventsOlderThanCutoffByDomainAndPair">
    select e from ReportedDifferenceEvent e where e.objId.pair.domain = :domain and e.objId.pair.key = :pair and e.lastSeen &lt; :cutoff
  </query>
</hibernate-mapping>
