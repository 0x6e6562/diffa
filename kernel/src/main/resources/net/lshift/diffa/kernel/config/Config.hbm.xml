<?xml version="1.0"?>
<!--

    Copyright (C) 2010-2011 LShift Ltd.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="net.lshift.diffa.kernel.config">

  <class name="CategoryDescriptor" table="category_descriptor" abstract="true">
    <id name="id" type="int" column="category_id">
      <generator class="native"/>
    </id>
    <discriminator column="constraint_type" type="string"/>
    <subclass name="RangeCategoryDescriptor" discriminator-value="range">
      <join table="range_category_descriptor">
        <key column="id"/>
        <property name="dataType" column="data_type" type="string"/>
        <property name="upper" column="upper_bound" type="string" not-null="false"/>
        <property name="lower" column="lower_bound" type="string" not-null="false"/>
      </join>
    </subclass>
    <subclass name="SetCategoryDescriptor" discriminator-value="set">
      <set name="values" table="set_constraint_values" lazy="false" cascade="all" order-by="value_name">
        <key column="value_id"/>
        <element column="value_name" type="string" not-null="true"/>
      </set>
      <join table="set_category_descriptor">
        <key column="id"/>
      </join>
    </subclass>
    <subclass name="PrefixCategoryDescriptor" discriminator-value="prefix">
      <property name="prefixLength" column="prefix_length" type="int"/>
      <property name="maxLength" column="max_length" type="int"/>
      <property name="step" type="int"/>
      <join table="prefix_category_descriptor">
        <key column="id"/>
      </join>
    </subclass>
  </class>

  <class name="Endpoint" table="endpoint" abstract="false">
    <id name="name" type="string"/>
    <many-to-one name="domain" class="Domain" not-null="true" lazy="false" fetch="join"/>
    <property name="scanUrl" column="scan_url" type="string" not-null="false" unique="false"/>
    <property name="contentRetrievalUrl" column="content_retrieval_url" type="string" not-null="false" unique="false"/>
    <property name="versionGenerationUrl" column="version_generation_url" type="string" not-null="false" unique="false"/>
    <property name="inboundUrl" column="inbound_url" type="string" not-null="false" unique="false"/>
    <property name="contentType" column="content_type" type="string" not-null="true"/>
    <property name="inboundContentType" column="inbound_content_type" type="string" not-null="false"/>
    <map name="categories" lazy="false" cascade="all" >
      <key column="id"/>
      <index column="name" type="string"/>
      <many-to-many column="category_descriptor_id" class="CategoryDescriptor"/>
    </map>
  </class>

  <class name="Pair" table="pair" abstract="false">
    <id name="key" type="string" column="pair_key"/>
    <many-to-one name="upstream" class="Endpoint" not-null="true" lazy="false" fetch="join"/>
    <many-to-one name="downstream" class="Endpoint" not-null="true" lazy="false" fetch="join"/>
    <many-to-one name="domain" class="Domain" not-null="true" lazy="false" fetch="join"/>
    <property name="versionPolicyName" type="string" column="version_policy_name" not-null="false"/>
    <property name="matchingTimeout" type="int" column="matching_timeout" not-null="false"/>
    <property name="scanCronSpec" type="string" column="scan_cron_spec" not-null="false"/>
  </class>

  <class name="Domain" table="domains" abstract="false">
    <id name="name" type="string" column="name"/>
    <set name="users" table="domain_users">
      <key column="domain_name"/>
      <many-to-many column="user_name" class="User" lazy="false"/>
    </set>
  </class>

  <class name="User" table="users" abstract="false">
    <id name="name" type="string" column="name"/>
    <set name="domains" table="domain_users">
      <key column="user_name"/>
      <many-to-many column="domain_name" class="Domain" lazy="false"/>
    </set>
    <property name="email" type="string" />
  </class>

  <class name="ConfigOption" table="config_options" abstract="false">
    <composite-id mapped="true" class="net.lshift.diffa.kernel.config.DomainScopedKey">
      <key-property name="key" type="string" column="opt_key" />
      <key-many-to-one name="domain" class="Domain" column="domain" />
    </composite-id>
    <property name="value" type="string" column="opt_val" />
  </class>

  <class name="RepairAction" table="repair_actions" abstract="false">
    <composite-id mapped="true">
      <key-property name="name" type="string" column="name" />
      <key-many-to-one name="pair" class="Pair" column="pair_key" lazy="false" />
    </composite-id>
    <property name="url" type="string" column="url" />
    <property name="scope" type="string" column="scope" />
  </class>

  <class name="Escalation" table="escalations" abstract="false">
    <composite-id mapped="true">
      <key-property name="name" type="string" column="name" />
      <key-many-to-one name="pair" class="Pair" column="pair_key" lazy="false"/>
    </composite-id>
    <property name="action" type="string" column="action" not-null="true" />
    <property name="actionType" type="string" column="action_type" not-null="true"/>
    <property name="event" type="string" column="event" not-null="true"/>
    <property name="origin" type="string" column="origin" not-null="true"/>
  </class>

  <query name="endpointByName">
    select e from Endpoint e where e.name = :name
  </query>

  <query name="userByName">
    select u from User u where u.name = :name
  </query>

  <query name="pairByKey">
    select c from Pair c where c.key = :key
  </query>

  <!-- Select all statements -->

  <query name="allEndpoints">
    select e from Endpoint e
  </query>

  <query name="allUsers">
    select u from User u
  </query>

  <query name="allPairs">
    select p from Pair p
  </query>

  <query name="allDomains">
    select d from Domain d
  </query>

  <query name="allRepairActions">
    select a from RepairAction a
  </query>

  <query name="allEscalations">
    select e from Escalation e
  </query>

  <query name="allConfigs">
    select o from ConfigOption o
  </query>

  <!-- Queries by endpoint -->

  <query name="pairsByInboundEndpointUrl">
    select p from Pair p
    where p.upstream.inboundUrl = :url
    or p.downstream.inboundUrl = :url
  </query>

  <!-- Queries by domain only -->

  <query name="usersByDomain">
    select u from User u
    join u.domains d
    where d.name = :domain_name
  </query>

  <query name="domainByName">
    select d from Domain d where d.name = :name
  </query>

  <query name="pairsByDomain">
    select p from Pair p where p.domain.name = :domain_name
  </query>

  <query name="endpointsByDomain">
    select e from Endpoint e where e.domain.name = :domain_name
  </query>

  <query name="escalationsByDomain">
    select e from Escalation e
    join e.pair as p
    join p.domain as d with d.name = :domain_name
  </query>

  <query name="repairActionsByDomain">
    select a from RepairAction a
    join a.pair as p
    join p.domain as d with d.name = :name
  </query>

  <query name="configOptionsByDomain">
    select o from ConfigOption o where o.domain.name = :name
  </query>

  <!-- Query by pair with domain -->

  <query name="repairActionsByPair">
    select a from RepairAction a
    join a.pair as p with p.key = :pair_key
    join p.domain as d with d.name = :domain_name
  </query>

  <query name="escalationsByPair">
    select e from Escalation e
    join e.pair as p with p.key = :pair_key
    join p.domain as d with d.name = :domain_name
  </query>

  <!-- Query by pair with domain and key -->

  <query name="repairActionsByNameAndPair">
    select a from RepairAction a
    join a.pair as p with p.key = :pair_key
    join p.domain as d with d.name = :domain_name
    where a.name = :name
  </query>

  <query name="escalationsByNameAndPair">
    select e from Escalation e
    join e.pair as p with p.key = :pair_key
    join p.domain as d with d.name = :domain_name
    where e.name = :name
  </query>

  <query name="configOptionByNameAndKey">
    select o.value from ConfigOption o
    where o.key = :key
    and o.domain.name = :domain_name
  </query>

  <!-- Other -->

  <query name="rootConfigOptionByKey">
    select o.value from ConfigOption o where o.key = :key and o.domain = 'root'
  </query>

  <query name="allNonInternalConfigOptions">
    select o from ConfigOption o where o.domain is not 'root'
  </query>

</hibernate-mapping>
